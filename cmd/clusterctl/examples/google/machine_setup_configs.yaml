items:
- machineParams:
  - os: ubuntu-1604-lts
    roles:
    - Master
    versions:
      kubelet: 1.12.0
      controlPlane: 1.12.0
  image: projects/ubuntu-os-cloud/global/images/family/ubuntu-1604-lts
  metadata:
  - name: "startup-script"
    value: |
      set -e
      set -x
      (
      ARCH=amd64

      function curl_metadata() {
          curl  --retry 5 --silent --fail --header "Metadata-Flavor: Google" "http://metadata/computeMetadata/v1/instance/$@"
      }

      function copy_file () {
          if ! curl_metadata attributes/$1; then
              return
          fi
          echo "Copying metadata $1 -> $2..."
          mkdir -p $(dirname $2)
          curl_metadata attributes/$1 > $2
          chmod $3 $2
      }

      curl -sf https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add -
      touch /etc/apt/sources.list.d/kubernetes.list
      sh -c 'echo "deb http://apt.kubernetes.io/ kubernetes-xenial main" > /etc/apt/sources.list.d/kubernetes.list'
      apt-get update -y
      apt-get install -y \
        socat \
        ebtables \
        apt-transport-https \
        cloud-utils \
        prips

      function install_configure_docker () {
        # prevent docker from auto-starting
        echo "exit 101" > /usr/sbin/policy-rc.d
        chmod +x /usr/sbin/policy-rc.d
        trap "rm /usr/sbin/policy-rc.d" RETURN
        apt-get install -y docker.io
        echo 'DOCKER_OPTS="--iptables=false --ip-masq=false"' > /etc/default/docker
        systemctl daemon-reload
        systemctl enable docker
        systemctl start docker
      }
      install_configure_docker

      curl -fsSL https://dl.k8s.io/release/${VERSION}/bin/linux/${ARCH}/kubeadm > /usr/bin/kubeadm.dl
      chmod a+rx /usr/bin/kubeadm.dl
      # kubeadm uses 10th IP as DNS server
      CLUSTER_DNS_SERVER=$(prips ${SERVICE_CIDR} | head -n 11 | tail -n 1)
      # Our Debian packages have versions like "1.8.0-00" or "1.8.0-01". Do a prefix
      # search based on our SemVer to find the right (newest) package version.
      function getversion() {
          name=$1
          prefix=$2
          version=$(apt-cache madison $name | awk '{ print $3 }' | grep ^$prefix | head -n1)
          if [[ -z "$version" ]]; then
              echo Can\'t find package $name with prefix $prefix
              exit 1
          fi
          echo $version
      }
      KUBELET=$(getversion kubelet ${KUBELET_VERSION}-)
      KUBEADM=$(getversion kubeadm ${KUBELET_VERSION}-)
      apt-get install -y \
          kubelet=${KUBELET} \
          kubeadm=${KUBEADM}
      mv /usr/bin/kubeadm.dl /usr/bin/kubeadm
      chmod a+rx /usr/bin/kubeadm

      # Override network args to use kubenet instead of cni, override Kubelet DNS args and
      # add cloud provider args.
      cat > /etc/default/kubelet <<EOF
      KUBELET_EXTRA_ARGS="--network-plugin=kubenet --cluster-dns=${CLUSTER_DNS_SERVER} --cluster-domain=${CLUSTER_DNS_DOMAIN} --cloud-provider=gce --cloud-config=/etc/kubernetes/cloud-config"
      EOF

      systemctl daemon-reload
      systemctl restart kubelet.service
      PRIVATEIP=`curl_metadata "network-interfaces/0/ip"`
      echo $PRIVATEIP > /tmp/.ip
      PUBLICIP=`curl_metadata "network-interfaces/0/access-configs/0/external-ip"`

      # Set up the GCE cloud config, which gets picked up by kubeadm init since cloudProvider is set to GCE.
      copy_file cloud-config /etc/kubernetes/cloud-config 0644

      # Set up kubeadm config file to pass parameters to kubeadm init.
      cat > /etc/kubernetes/kubeadm_config.yaml <<EOF
      apiVersion: kubeadm.k8s.io/v1alpha2
      kind: MasterConfiguration
      api:
        advertiseAddress: ${PUBLICIP}
        bindPort: ${PORT}
      networking:
        serviceSubnet: ${SERVICE_CIDR}
      kubernetesVersion: v${CONTROL_PLANE_VERSION}
      apiServerCertSANs:
      - ${PUBLICIP}
      - ${PRIVATEIP}
      bootstrapTokens:
      - groups:
        - system:bootstrappers:kubeadm:default-node-token
        token: ${TOKEN}
      apiServerExtraArgs:
        cloud-provider: gce
      controllerManagerExtraArgs:
        allocate-node-cidrs: "true"
        cloud-provider: gce
        cluster-cidr: ${POD_CIDR}
        service-cluster-ip-range: ${SERVICE_CIDR}
      EOF

      function install_certificates () {
          if ! curl_metadata "attributes/ca-cert"; then
              return
          fi
          echo "Configuring custom certificate authority..."
          PKI_PATH=/etc/kubernetes/pki
          mkdir -p ${PKI_PATH}
          CA_CERT_PATH=${PKI_PATH}/ca.crt
          curl_metadata "attributes/ca-cert" | base64 -d > ${CA_CERT_PATH}
          chmod 0644 ${CA_CERT_PATH}
          CA_KEY_PATH=${PKI_PATH}/ca.key
          curl_metadata "attributes/ca-key" | base64 -d > ${CA_KEY_PATH}
          chmod 0600 ${CA_KEY_PATH}
      }

      # Create and set bridge-nf-call-iptables to 1 to pass the kubeadm preflight check.
      # Workaround was found here:
      # http://zeeshanali.com/sysadmin/fixed-sysctl-cannot-stat-procsysnetbridgebridge-nf-call-iptables/
      modprobe br_netfilter

      install_certificates

      kubeadm init --config /etc/kubernetes/kubeadm_config.yaml

      for tries in $(seq 1 60); do
          kubectl --kubeconfig /etc/kubernetes/kubelet.conf annotate --overwrite node $(hostname) machine=${MACHINE} && break
          sleep 1
      done
      echo done.
      ) 2>&1 | tee /var/log/startup.log
- machineParams:
  - os: ubuntu-1604-lts
    roles:
    - Node
    versions:
      kubelet: 1.12.0
  image: projects/ubuntu-os-cloud/global/images/family/ubuntu-1604-lts
  metadata:
  - name: "startup-script"
    value: |
      set -e
      set -x
      (
      function curl_metadata() {
          curl  --retry 5 --silent --fail --header "Metadata-Flavor: Google" "http://metadata/computeMetadata/v1/instance/$@"
      }

      function copy_file () {
          if ! curl_metadata attributes/$1; then
              return
          fi
          echo "Copying metadata $1 -> $2..."
          mkdir -p $(dirname $2)
          curl_metadata attributes/$1 > $2
          chmod $3 $2
      }

      apt-get update
      apt-get install -y apt-transport-https prips
      apt-key adv --keyserver hkp://keyserver.ubuntu.com --recv-keys F76221572C52609D
      cat <<EOF > /etc/apt/sources.list.d/k8s.list
      deb [arch=amd64] https://apt.dockerproject.org/repo ubuntu-xenial main
      EOF
      apt-get update

      function install_configure_docker () {
          # prevent docker from auto-starting
          echo "exit 101" > /usr/sbin/policy-rc.d
          chmod +x /usr/sbin/policy-rc.d
          trap "rm /usr/sbin/policy-rc.d" RETURN
          apt-get install -y docker-engine=1.12.0-0~xenial
          echo 'DOCKER_OPTS="--iptables=false --ip-masq=false"' > /etc/default/docker
          systemctl daemon-reload
          systemctl enable docker
          systemctl start docker
      }

      install_configure_docker

      copy_file cloud-config /etc/kubernetes/cloud-config 0644

      curl -fs https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key add -
      cat <<EOF > /etc/apt/sources.list.d/kubernetes.list
      deb http://apt.kubernetes.io/ kubernetes-xenial main
      EOF
      apt-get update

      # Our Debian packages have versions like "1.8.0-00" or "1.8.0-01". Do a prefix
      # search based on our SemVer to find the right (newest) package version.
      function getversion() {
      	name=$1
      	prefix=$2
      	version=$(apt-cache madison $name | awk '{ print $3 }' | grep ^$prefix | head -n1)
      	if [[ -z "$version" ]]; then
      		echo Can\'t find package $name with prefix $prefix
      		exit 1
      	fi
      	echo $version
      }
      KUBELET=$(getversion kubelet ${KUBELET_VERSION}-)
      KUBEADM=$(getversion kubeadm ${KUBELET_VERSION}-)
      KUBECTL=$(getversion kubectl ${KUBELET_VERSION}-)
      apt-get install -y kubelet=${KUBELET} kubeadm=${KUBEADM} kubectl=${KUBECTL}
      # kubeadm uses 10th IP as DNS server
      CLUSTER_DNS_SERVER=$(prips ${SERVICE_CIDR} | head -n 11 | tail -n 1)
      # Override network args to use kubenet instead of cni, override Kubelet DNS args and
      # add cloud provider args.
      cat > /etc/default/kubelet <<EOF
      KUBELET_EXTRA_ARGS="--network-plugin=kubenet --cluster-dns=${CLUSTER_DNS_SERVER} --cluster-domain=${CLUSTER_DNS_DOMAIN} --cloud-provider=gce --cloud-config=/etc/kubernetes/cloud-config"
      EOF

      systemctl daemon-reload
      systemctl restart kubelet.service
      kubeadm join --token "${TOKEN}" "${MASTER}" --ignore-preflight-errors=all --discovery-token-unsafe-skip-ca-verification
      for tries in $(seq 1 60); do
      	kubectl --kubeconfig /etc/kubernetes/kubelet.conf annotate --overwrite node $(hostname) machine=${MACHINE} && break
      	sleep 1
      done
      echo done.
      ) 2>&1 | tee /var/log/startup.log
