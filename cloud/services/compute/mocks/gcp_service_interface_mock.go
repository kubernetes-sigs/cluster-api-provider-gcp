/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by MockGen. DO NOT EDIT.
// Source: sigs.k8s.io/cluster-api-provider-gcp/cloud/services/compute (interfaces: ServiceInterface)

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	v1 "google.golang.org/api/compute/v1"
	reflect "reflect"
	scope "sigs.k8s.io/cluster-api-provider-gcp/cloud/scope"
)

// MockServiceInterface is a mock of ServiceInterface interface
type MockServiceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockServiceInterfaceMockRecorder
}

// MockServiceInterfaceMockRecorder is the mock recorder for MockServiceInterface
type MockServiceInterfaceMockRecorder struct {
	mock *MockServiceInterface
}

// NewMockServiceInterface creates a new mock instance
func NewMockServiceInterface(ctrl *gomock.Controller) *MockServiceInterface {
	mock := &MockServiceInterface{ctrl: ctrl}
	mock.recorder = &MockServiceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockServiceInterface) EXPECT() *MockServiceInterfaceMockRecorder {
	return m.recorder
}

// CreateInstance mocks base method
func (m *MockServiceInterface) CreateInstance(arg0 *scope.MachineScope) (*v1.Instance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateInstance", arg0)
	ret0, _ := ret[0].(*v1.Instance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateInstance indicates an expected call of CreateInstance
func (mr *MockServiceInterfaceMockRecorder) CreateInstance(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateInstance", reflect.TypeOf((*MockServiceInterface)(nil).CreateInstance), arg0)
}

// DeleteFirewalls mocks base method
func (m *MockServiceInterface) DeleteFirewalls() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFirewalls")
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteFirewalls indicates an expected call of DeleteFirewalls
func (mr *MockServiceInterfaceMockRecorder) DeleteFirewalls() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFirewalls", reflect.TypeOf((*MockServiceInterface)(nil).DeleteFirewalls))
}

// DeleteInstanceGroups mocks base method
func (m *MockServiceInterface) DeleteInstanceGroups() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteInstanceGroups")
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteInstanceGroups indicates an expected call of DeleteInstanceGroups
func (mr *MockServiceInterfaceMockRecorder) DeleteInstanceGroups() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteInstanceGroups", reflect.TypeOf((*MockServiceInterface)(nil).DeleteInstanceGroups))
}

// DeleteLoadbalancers mocks base method
func (m *MockServiceInterface) DeleteLoadbalancers() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteLoadbalancers")
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteLoadbalancers indicates an expected call of DeleteLoadbalancers
func (mr *MockServiceInterfaceMockRecorder) DeleteLoadbalancers() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLoadbalancers", reflect.TypeOf((*MockServiceInterface)(nil).DeleteLoadbalancers))
}

// DeleteNetwork mocks base method
func (m *MockServiceInterface) DeleteNetwork() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteNetwork")
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteNetwork indicates an expected call of DeleteNetwork
func (mr *MockServiceInterfaceMockRecorder) DeleteNetwork() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteNetwork", reflect.TypeOf((*MockServiceInterface)(nil).DeleteNetwork))
}

// EnsureInstanceGroupMember mocks base method
func (m *MockServiceInterface) EnsureInstanceGroupMember(arg0, arg1 string, arg2 *v1.Instance) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnsureInstanceGroupMember", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// EnsureInstanceGroupMember indicates an expected call of EnsureInstanceGroupMember
func (mr *MockServiceInterfaceMockRecorder) EnsureInstanceGroupMember(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnsureInstanceGroupMember", reflect.TypeOf((*MockServiceInterface)(nil).EnsureInstanceGroupMember), arg0, arg1, arg2)
}

// GetInstanceGroupMembers mocks base method
func (m *MockServiceInterface) GetInstanceGroupMembers(arg0, arg1 string) ([]*v1.InstanceWithNamedPorts, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstanceGroupMembers", arg0, arg1)
	ret0, _ := ret[0].([]*v1.InstanceWithNamedPorts)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInstanceGroupMembers indicates an expected call of GetInstanceGroupMembers
func (mr *MockServiceInterfaceMockRecorder) GetInstanceGroupMembers(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstanceGroupMembers", reflect.TypeOf((*MockServiceInterface)(nil).GetInstanceGroupMembers), arg0, arg1)
}

// GetOrCreateInstanceGroup mocks base method
func (m *MockServiceInterface) GetOrCreateInstanceGroup(arg0, arg1 string) (*v1.InstanceGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrCreateInstanceGroup", arg0, arg1)
	ret0, _ := ret[0].(*v1.InstanceGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrCreateInstanceGroup indicates an expected call of GetOrCreateInstanceGroup
func (mr *MockServiceInterfaceMockRecorder) GetOrCreateInstanceGroup(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrCreateInstanceGroup", reflect.TypeOf((*MockServiceInterface)(nil).GetOrCreateInstanceGroup), arg0, arg1)
}

// InstanceIfExists mocks base method
func (m *MockServiceInterface) InstanceIfExists(arg0 *scope.MachineScope) (*v1.Instance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InstanceIfExists", arg0)
	ret0, _ := ret[0].(*v1.Instance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InstanceIfExists indicates an expected call of InstanceIfExists
func (mr *MockServiceInterfaceMockRecorder) InstanceIfExists(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InstanceIfExists", reflect.TypeOf((*MockServiceInterface)(nil).InstanceIfExists), arg0)
}

// ReconcileFirewalls mocks base method
func (m *MockServiceInterface) ReconcileFirewalls() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileFirewalls")
	ret0, _ := ret[0].(error)
	return ret0
}

// ReconcileFirewalls indicates an expected call of ReconcileFirewalls
func (mr *MockServiceInterfaceMockRecorder) ReconcileFirewalls() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileFirewalls", reflect.TypeOf((*MockServiceInterface)(nil).ReconcileFirewalls))
}

// ReconcileInstanceGroups mocks base method
func (m *MockServiceInterface) ReconcileInstanceGroups() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileInstanceGroups")
	ret0, _ := ret[0].(error)
	return ret0
}

// ReconcileInstanceGroups indicates an expected call of ReconcileInstanceGroups
func (mr *MockServiceInterfaceMockRecorder) ReconcileInstanceGroups() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileInstanceGroups", reflect.TypeOf((*MockServiceInterface)(nil).ReconcileInstanceGroups))
}

// ReconcileLoadbalancers mocks base method
func (m *MockServiceInterface) ReconcileLoadbalancers() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileLoadbalancers")
	ret0, _ := ret[0].(error)
	return ret0
}

// ReconcileLoadbalancers indicates an expected call of ReconcileLoadbalancers
func (mr *MockServiceInterfaceMockRecorder) ReconcileLoadbalancers() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileLoadbalancers", reflect.TypeOf((*MockServiceInterface)(nil).ReconcileLoadbalancers))
}

// ReconcileNetwork mocks base method
func (m *MockServiceInterface) ReconcileNetwork() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileNetwork")
	ret0, _ := ret[0].(error)
	return ret0
}

// ReconcileNetwork indicates an expected call of ReconcileNetwork
func (mr *MockServiceInterfaceMockRecorder) ReconcileNetwork() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileNetwork", reflect.TypeOf((*MockServiceInterface)(nil).ReconcileNetwork))
}

// TerminateInstanceAndWait mocks base method
func (m *MockServiceInterface) TerminateInstanceAndWait(arg0 *scope.MachineScope) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TerminateInstanceAndWait", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// TerminateInstanceAndWait indicates an expected call of TerminateInstanceAndWait
func (mr *MockServiceInterfaceMockRecorder) TerminateInstanceAndWait(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TerminateInstanceAndWait", reflect.TypeOf((*MockServiceInterface)(nil).TerminateInstanceAndWait), arg0)
}

// UpdateBackendServices mocks base method
func (m *MockServiceInterface) UpdateBackendServices() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBackendServices")
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateBackendServices indicates an expected call of UpdateBackendServices
func (mr *MockServiceInterfaceMockRecorder) UpdateBackendServices() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBackendServices", reflect.TypeOf((*MockServiceInterface)(nil).UpdateBackendServices))
}
